# -*- coding:utf-8 -*-
from ApiManager.pf_netcar_api.sheet.blacklist_manager_api import DownloadBlackListApi,ImportBlackListApi,GetBlackListApi,DeleteBlackListApi
from ApiManager.pf_netcar_monitoring.base_monitoring import BaseMonitoring
from ApiManager.pf_netcar_api.login_api import TradeLoginApi
from ApiManager.pf_netcar_monitoring.base_pf_netcar import create_order,create_transfer_drop_off_order,create_transfer_pick_up_order
from ApiManager.utils.XXL_job import XXLJob
from xlutils.copy import copy
from HttpRunnerManager.settings import BASE_DIR
from ApiManager.utils.redis_helper import BLACKLIST_MONITORING_KEY
import xlrd, os,time,datetime
from ApiManager.utils import hooks

class BlackListManagerMonitoring(BaseMonitoring):
    """黑名单管理监控"""



    def download_blacklist_template(self):

        """测试下载模板接口"""

        download_bytes = b'\xd0\xcf\x11\xe0\xa1\xb1\x1a\xe1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00;\x00\x03\x00\xfe\xff\t\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\xfe\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffR\x00o\x00o\x00t\x00 \x00E\x00n\x00t\x00r\x00y\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x05\x01\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xc0\x06\x00\x00\x00\x00\x00\x00W\x00o\x00r\x00k\x00b\x00o\x00o\x00k\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x00\x02\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb6\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\xfd\xff\xff\xff\xfe\xff\xff\xff\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\x08\x10\x00\x00\x06\x05\x00\xd3\x10\xcc\x07A\x00\x00\x00\x06\x00\x00\x00\xe1\x00\x02\x00\xb0\x04\xc1\x00\x02\x00\x00\x00\xe2\x00\x00\x00\\\x00p\x00\x06\x00\x00netcar                                                                                                       B\x00\x02\x00\xb0\x04a\x01\x02\x00\x00\x00=\x01\x02\x00\x00\x00\x9c\x00\x02\x00\x0e\x00\x19\x00\x02\x00\x00\x00\x12\x00\x02\x00\x00\x00\x13\x00\x02\x00\x00\x00\xaf\x01\x02\x00\x00\x00\xbc\x01\x02\x00\x00\x00=\x00\x12\x00h\x01\x0e\x01\\:\xbe#8\x00\x00\x00\x00\x00\x01\x00X\x02@\x00\x02\x00\x00\x00\x8d\x00\x02\x00\x00\x00"\x00\x02\x00\x00\x00\x0e\x00\x02\x00\x01\x00\xb7\x01\x02\x00\x00\x00\xda\x00\x02\x00\x00\x001\x00\x15\x00\xc8\x00\x00\x00\xff\x7f\x90\x01\x00\x00\x00\x00\x00\x00\x05\x00Arial1\x00\x15\x00\xc8\x00\x00\x00\xff\x7f\x90\x01\x00\x00\x00\x00\x00\x00\x05\x00Arial1\x00\x15\x00\xc8\x00\x00\x00\xff\x7f\x90\x01\x00\x00\x00\x00\x00\x00\x05\x00Arial1\x00\x15\x00\xc8\x00\x00\x00\xff\x7f\x90\x01\x00\x00\x00\x00\x00\x00\x05\x00Arial\x1e\x04\x1a\x00\x05\x00\x15\x00\x00"$"#,##0_);("$"#,##0)\x1e\x04\x1f\x00\x06\x00\x1a\x00\x00"$"#,##0_);[Red]("$"#,##0)\x1e\x04 \x00\x07\x00\x1b\x00\x00"$"#,##0.00_);("$"#,##0.00)\x1e\x04%\x00\x08\x00 \x00\x00"$"#,##0.00_);[Red]("$"#,##0.00)\x1e\x045\x00*\x000\x00\x00_("$"* #,##0_);_("$"* (#,##0);_("$"* "-"_);_(@_)\x1e\x04,\x00)\x00\'\x00\x00_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)\x1e\x04=\x00,\x008\x00\x00_("$"* #,##0.00_);_("$"* (#,##0.00);_("$"* "-"??_);_(@_)\x1e\x044\x00+\x00/\x00\x00_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)\xe0\x00\x14\x00\x00\x00\x00\x00\xf5\xff \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x01\x00\x00\x00\xf5\xff \x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x01\x00\x00\x00\xf5\xff \x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x02\x00\x00\x00\xf5\xff \x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x02\x00\x00\x00\xf5\xff \x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x00\x00\x00\x00\xf5\xff \x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x00\x00\x00\x00\xf5\xff \x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x00\x00\x00\x00\xf5\xff \x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x00\x00\x00\x00\xf5\xff \x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x00\x00\x00\x00\xf5\xff \x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x00\x00\x00\x00\xf5\xff \x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x00\x00\x00\x00\xf5\xff \x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x00\x00\x00\x00\xf5\xff \x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x00\x00\x00\x00\xf5\xff \x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x00\x00\x00\x00\xf5\xff \x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x00\x00\x00\x00\x01\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x01\x00+\x00\xf5\xff \x00\x00\xf8\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x01\x00)\x00\xf5\xff \x00\x00\xf8\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x01\x00,\x00\xf5\xff \x00\x00\xf8\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x01\x00*\x00\xf5\xff \x00\x00\xf8\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x01\x00\t\x00\xf5\xff \x00\x00\xf8\x00\x00\x00\x00\x00\x00\x00\x00\xc0 \xe0\x00\x14\x00\x00\x001\x00\x01\x00 \x00\x00\x00\x00\x00\x08\x04\x08\x04\x00\x00\xc0 \x93\x02\x04\x00\x10\x80\x03\xff\x93\x02\x04\x00\x11\x80\x06\xff\x93\x02\x04\x00\x12\x80\x04\xff\x93\x02\x04\x00\x13\x80\x07\xff\x93\x02\x04\x00\x00\x80\x00\xff\x93\x02\x04\x00\x14\x80\x05\xff`\x01\x02\x00\x00\x00\x85\x00\x0e\x00y\x05\x00\x00\x00\x00\x06\x00Sheet0\x8c\x00\x04\x00\x01\x00\x01\x00\xae\x01\x04\x00\x01\x00\x01\x04\x17\x00\x08\x00\x01\x00\x00\x00\x00\x00\x00\x00\xfc\x00\x13\x00\x01\x00\x00\x00\x01\x00\x00\x00\x04\x00\x01(u7bI\x00D\x00\xff\x00\n\x00\x08\x00\\\x05\x00\x00\x0c\x00\x00\x00\n\x00\x00\x00\t\x08\x10\x00\x00\x06\x10\x00\xbb\r\xcc\x07\xc1\x00\x00\x00\x06\x00\x00\x00\x0b\x02\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x7f\x06\x00\x00\r\x00\x02\x00\x01\x00\x0c\x00\x02\x00d\x00\x0f\x00\x02\x00\x01\x00\x11\x00\x02\x00\x00\x00\x10\x00\x08\x00\xfc\xa9\xf1\xd2MbP?_\x00\x02\x00\x01\x00*\x00\x02\x00\x00\x00+\x00\x02\x00\x00\x00\x82\x00\x02\x00\x01\x00\x80\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00%\x02\x04\x00\x00\x00\xff\x00\x81\x00\x02\x00\xc1\x04\x14\x00\x00\x00\x15\x00\x00\x00\x83\x00\x02\x00\x00\x00\x84\x00\x02\x00\x00\x00\xa1\x00"\x00\x01\x00d\x00\x01\x00\x01\x00\x01\x00\x02\x00,\x01,\x01\x00\x00\x00\x00\x00\x00\xe0?\x00\x00\x00\x00\x00\x00\xe0?\x01\x00U\x00\x02\x00\x08\x00}\x00\x0c\x00\x00\x00\x00\x00\xb9\x04\x15\x00\x02\x00\x02\x00\x00\x02\x0e\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x08\x02\x10\x00\x00\x00\x00\x00\x01\x00\xff\x00\x00\x00\x00\x00\x00\x01\x0f\x00\xfd\x00\n\x00\x00\x00\x00\x00\x15\x00\x00\x00\x00\x00\xd7\x00\x06\x00"\x00\x00\x00\x00\x00>\x02\x12\x00\xb6\x06\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1d\x00\x0f\x00\x03\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        download_api = DownloadBlackListApi()
        download_api.post()
        assert download_api.get_status_code() == 200
        assert download_api.get_resp_content_not_json() == download_bytes


    def import_blacklist_template_customer_exist(self):
        """上传黑名单文件，数据库存在的用户"""
        excel_file_path = os.path.join(BASE_DIR, './ApiManager/pf_netcar_monitoring/ImportBlackListTemplate.xls')
        excel_file = xlrd.open_workbook(excel_file_path)
        write_data = copy(excel_file)
        sheet_data = write_data.get_sheet(0)

        #准备测试数据
        mobile_list = []
        for x in range(3):
            login_mobile = TradeLoginApi().login()
            mobile_list.append(login_mobile['mobile'])
        row = 1
        for x in mobile_list:
            sheet_data.write(row, 0, x)
            row += 1
        write_data.save(excel_file_path)
        time.sleep(1)
        # 请求上传文件接口
        files = {'importFile': ('ImportBlackListTemplate.xls', open(excel_file_path, 'rb'))}
        import_blacklist_api = ImportBlackListApi()
        response_result = import_blacklist_api.request_api(file=files)
        assert response_result['code'] == 0
        assert response_result['msg'] == 'OK'
        # 查询黑名单列表
        get_black_list = GetBlackListApi()
        get_black_list.get()
        get_res_data = get_black_list.get_resp_content()
        assert get_res_data['code'] == 0
        assert get_res_data['msg'] == 'OK'
        assert get_res_data['data']['list'][0]['userId'] == mobile_list[2]
        assert get_res_data['data']['list'][0]['pushState'] == 1
        assert get_res_data['data']['list'][0]['pushStateDesc'] == '未推送'
        assert get_res_data['data']['list'][1]['userId'] == mobile_list[1]
        assert get_res_data['data']['list'][1]['pushState'] == 1
        assert get_res_data['data']['list'][1]['pushStateDesc'] == '未推送'
        assert get_res_data['data']['list'][2]['userId'] == mobile_list[0]
        assert get_res_data['data']['list'][2]['pushState'] == 1
        assert get_res_data['data']['list'][2]['pushStateDesc'] == '未推送'
        # 执行sheet的黑名单job
        XXLJob().run_job(job_id='5', sheet_job=True)
        time.sleep(5)
        # 查询黑名单列表
        get_black_list = GetBlackListApi()
        get_black_list.get()
        get_res_data = get_black_list.get_resp_content()
        assert get_res_data['data']['list'][0]['userId'] == mobile_list[2]
        assert get_res_data['data']['list'][0]['pushState'] == 3
        assert get_res_data['data']['list'][0]['pushStateDesc'] == '推送成功'
        assert get_res_data['data']['list'][1]['userId'] == mobile_list[1]
        assert get_res_data['data']['list'][1]['pushState'] == 3
        assert get_res_data['data']['list'][1]['pushStateDesc'] == '推送成功'
        assert get_res_data['data']['list'][2]['userId'] == mobile_list[0]
        assert get_res_data['data']['list'][2]['pushState'] == 3
        assert get_res_data['data']['list'][2]['pushStateDesc'] == '推送成功'
        # 黑名单用户进行下单
        for mobile in mobile_list:
            # 验证实时单无法下单
            create_order_result = create_order(user_mobile=mobile,random_channel=True, open_sign_force=True)
            assert create_order_result['resp_code'] == 903
            assert create_order_result['message'] == 'no_car'

            # 验证接机订单无法下单
            now_time = datetime.datetime.now()
            flight_date = (now_time + datetime.timedelta(days=+1)).strftime("%Y-%m-%d")
            create_transfer_pick_up_order_result = create_transfer_pick_up_order(user_mobile=mobile,channel_name='cc',flight_date=flight_date,passenger_mobile='13501077762',passenger_name='张三')
            assert create_transfer_pick_up_order_result['order_id'] == None
            assert create_transfer_pick_up_order_result['resp_code'] == 903
            assert create_transfer_pick_up_order_result['message'] == 'no_car'

            # 验证接机订单无法下单
            booking_date = (now_time + datetime.timedelta(days=+1)).strftime("%Y-%m-%d 20:00:00")
            create_transfer_pick_up_order_result = create_transfer_drop_off_order(user_mobile=mobile,channel_name='cc',booking_date=booking_date,passenger_mobile='13501077762',passenger_name='张三')
            assert create_transfer_pick_up_order_result['order_id'] == None
            assert create_transfer_pick_up_order_result['resp_code'] == 903
            assert create_transfer_pick_up_order_result['message'] == 'no_car'
            time.sleep(3)
            # 删除黑名单用户
            delete_blacklist_api = DeleteBlackListApi()
            delete_blacklist_api.post({'passId': '', 'userId': mobile})
            assert delete_blacklist_api.get_resp_code() == 0
            assert delete_blacklist_api.get_resp_message() == 'OK'
            # 查询黑名单用户列表
            get_black_list = GetBlackListApi()
            get_black_list.get()
            get_res_data = get_black_list.get_resp_content()
            assert get_res_data['code'] == 0
            assert get_res_data['msg'] == 'OK'
            black_list = get_res_data['data']['list']
            for x in black_list:
                assert mobile != x['userId']
            # 验证移除黑名单后实时单可以正常下单
            create_order_result = create_order(user_mobile=mobile,random_channel=True, open_sign_force=True)
            assert create_order_result['resp_code'] == 0
            assert create_order_result['message'] == 'OK'
            # 验证接机订单下单
            now_time = datetime.datetime.now()
            flight_date = (now_time + datetime.timedelta(days=+1)).strftime("%Y-%m-%d")
            create_transfer_pick_up_order_result = create_transfer_pick_up_order(user_mobile=mobile,channel_name='cc',flight_date=flight_date,passenger_mobile='13501077762',passenger_name='张三')
            assert create_transfer_pick_up_order_result['order_id'] != None
            assert create_transfer_pick_up_order_result['resp_code'] == 0
            assert create_transfer_pick_up_order_result['message'] == 'OK'
            # 验证接机订单下单
            booking_date = (now_time + datetime.timedelta(days=+1)).strftime("%Y-%m-%d 20:00:00")
            create_transfer_pick_up_order_result = create_transfer_drop_off_order(user_mobile=mobile, channel_name='cc', booking_date=booking_date,passenger_mobile='13501077762', passenger_name='张三')
            assert create_transfer_pick_up_order_result['order_id'] != None
            assert create_transfer_pick_up_order_result['resp_code'] == 0
            assert create_transfer_pick_up_order_result['message'] == 'OK'

    def tearDown(self):
        super(BlackListManagerMonitoring, self).tearDown()
        hooks.delete_blacklist()


if __name__ == '__main__':
    api = BlackListManagerMonitoring()
    # api.setUp()
    api.run_method(monitoring_name='黑名单管理监控', monitoring_class=api, redis_key=BLACKLIST_MONITORING_KEY)
    # api.import_blacklist_template_customer_exist()
    # api.tearDown()

